server {
    listen 443 ssl default_server;
    listen [::]:443 ssl default_server;

    server_name _;
    http2 on;

    root /www;
    index index.html;

    access_log off;
    error_log /dev/stderr info;

    client_max_body_size 50M;
    client_body_buffer_size 32k;

    server_tokens off;

    ssl_certificate /etc/nginx/ssl/live/sleepanarchy.com/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/live/sleepanarchy.com/privkey.pem;
    ssl_stapling on;
    ssl_stapling_verify on;

    # Tell Browsers to Always Upgrade Requests to HTTPS
    add_header Strict-Transport-Security "max-age=31536000;" always;
    # Only Allow Embedding in Frames From the Same Site
    add_header X-Frame-Options sameorigin always;
    # Block MimeType Sniffing for Script & Style Tags
    add_header X-Content-Type-Options nosniff;
    # Tell Browsers to Block XSS Attacks
    add_header X-XSS-Protection "1; mode=block";

    gzip on;
    gzip_buffers 16 16k;
    gzip_comp_level 5;
    gzip_http_version 1.0;
    gzip_proxied any;
    gzip_vary on;
    gzip_types
        text/plain text/css
        application/json application/javascript text/javascript
        text/xml application/xml application/xml+rss
        application/x-font-ttf image/x-icon
    ;

    location / {
        try_files $uri @prerender;
    }

    location = /index.html {
        expires -1;
    }

    # Cache Static Assets for a Long Time
    location ~* .(ico|css|js|ttf|woff2?)$ {
        expires 365d;
    }

    resolver 127.0.0.11 valid=10s;
    resolver_timeout 5s;

    location @prerender {
        set $prerender 0;
        if ($http_user_agent ~* "googlebot|bingbot|yandex|baiduspider|twitterbot|facebookexternalhit|rogerbot|linkedinbot|embedly|quora link preview|showyoubot|outbrain|pinterest\/0\.|pinterestbot|slackbot|vkShare|W3C_Validator|whatsapp|redditbot|discordbot|duckduckbot|slurp|exabot|facebot|ia_archiver|adsbot|bingpreview|google-structured-data-testing-tool|mediapartners-google|seobilitybot") {
            set $prerender 1;
        }
        if ($args ~ "_escaped_fragment_") {
            set $prerender 1;
        }
        if ($http_user_agent ~ "Prerender") {
            set $prerender 0;
        }
        if ($uri ~* "\.(js|css|xml|less|png|jpg|jpeg|gif|pdf|doc|txt|ico|rss|zip|mp3|rar|exe|wmv|doc|avi|ppt|mpg|mpeg|tif|wav|mov|psd|ai|xls|mp4|m4a|swf|dat|dmg|iso|flv|m4v|torrent|ttf|woff2?|svg|eot)") {
            set $prerender 0;
        }
        # And we ignore some known static directories
        if ($uri ~* "^/(media|api)") {
            set $prerender 0;
        }

        if ($prerender = 1) {
            set $prerender_server http://prerender:3000;
            rewrite .* /$scheme://$host$request_uri? break;
            proxy_pass $prerender_server;
        }
        if ($prerender = 0) {
            expires -1;
            rewrite .* /index.html break;
        }
    }

    # TODO: Serve /www/media w/ long expires?

    location ~ /api(/.*)$ {
        set $api_server api;
        proxy_pass http://$api_server:9001$1$is_args$args;
    }
}

server {
    listen 80 default_server;
    listen [::]:80 default_server;

    server_name _;

    # LetsEncrypt Certificate Verification
    location /.well-known/acme-challenge/ {
        root /www/certbot;
        try_files $uri $uri/ =404;
    }

    # Tell Browsers to Always Upgrade Requests to HTTPS
    add_header Strict-Transport-Security "max-age=31536000;" always;
    # Only allow embedding in frames from the same site
    add_header X-Frame-Options "sameorigin;" always;

    location / {
        return 302 https://$host$request_uri;
    }
}

# vim: set synmaxcol=500 :
